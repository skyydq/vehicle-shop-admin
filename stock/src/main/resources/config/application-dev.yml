server:
  port: 8084
  servlet:
    context-path: /vehicle #所有访问该应用的路径前缀

spring:
  main:
    allow-bean-definition-overriding: true

  #连接池配置
  datasource:
    name: druidDatasource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/vehicle_shop?allowMultiQueries=true&useUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=GMT%2B8
    username: root
    password: 123456
    # 使用druid数据源 鼎泰汽车
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      # 配置测试查询语句, #Oracle需要打开注释
      validationQuery: SELECT 1 FROM DUAL
      # 初始化大小，最小，最大
      initialSize: 10
      minIdle: 10
      maxActive: 200
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 180000
      testOnBorrow: false
      testWhileIdle: true
      removeAbandoned: true
      removeAbandonedTimeout: 1800
      logAbandoned: true
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxOpenPreparedStatements: 100
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

#mybatis
mybatis-plus:
  ## 如果是放在common模块的src/main/java目录下 classpath:com/yourpackage/*/mapper/*Mapper.xml
  # 如果是放在common模块的resource目录 classpath:mapper/*Mapper.xml
  mapper-locations: classpath:mapper/*Mapper.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.biao.shop.common.*.entity
  global-config:
    #数据库相关配置
    db-config:
      #主键类型  AUTO:"数据库ID自增", INPUT:"用户输入ID", ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID";
      id-type: UUID
      #字段策略 IGNORED:"忽略判断",NOT_NULL:"非 NULL 判断"),NOT_EMPTY:"非空判断"
      # field-strategy: NOT_NULL
    banner: false
  #原生配置
#  configuration: #>>>Property 'configuration' and 'configLocation' can not specified with together
#    #驼峰
#    map-underscore-to-camel-case: true
#    cache-enabled: false
#    #当查询数据为空时字段返回为null，不加这个查询数据为空时，字段将被隐藏
#    call-setters-on-nulls: true
#    #插入空值时报错
#    jdbc-type-for-null: 'null'
#    # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
#    # 解决加入logback后无sql打印的问题
  config-location: classpath:config/mybatis-config.xml


# mybatis sql日志
logging:
  #打印sql,你的项目包路径
  level:
    com:
      biao: debug

# rocketmq
rocketmq:
  producer:
    #该应用是否启用生产者
    isOnOff: on
    #发送同一类消息的设置为同一个group，保证唯一,默认不需要设置，rocketmq会使用ip@pid(pid代表jvm名字)作为唯一标示
    groupName: shop
    #mq的nameserver地址
    namesrvAddr: 192.168.1.224:9876
    #消息最大长度 默认1024*4(4M)
    maxMessageSize: 4096
    sendMsgTimeout: 3000
    #发送消息失败重试次数，默认2
    retryTimesWhenSendFailed: 2
    #### consumer
  consumer:
    isOnOff: on
    groupName: shop
    namesrvAddr: 192.168.1.224:9876
    #该消费者订阅的主题和tags("*"号表示订阅该主题下所有的tags),格式：topic~tag1||tag2||tag3;topic2~*;
    topics: ShopTopic~*
    consumeThreadMin: 20
    consumeThreadMax: 64
    #设置一次消费消息的条数，默认为1条
    consumeMessageBatchMaxSize: 1

## soul 配置
soul:
  http:
    adminUrl: http://localhost:9095
    contextPath: /stock
    appName: stockApp
    #register: true
    #zookeeperUrl: localhost:2181
  dubbo:
    adminUrl: http://localhost:9095
    contextPath: /stock
    appName: stockApp
# adminUrl: 为你启动的soul-admin 项目的ip + 端口，注意要加http://
# contextPath: 为你的这个mvc项目在soul网关的路由前缀， 比如/order ，/product 等等，网关会根据这个前缀来进行路由.
# appName：你的应用名称，不配置的话，会默认取 dubbo配置中application 中的名称

pagehelper:
  # dialect:
  # 分页插件会自动检测当前的数据库链接，自动选择合适的分页方式（可以不设置）
  # helper-dialect: mysql
  # 上面数据库设置后，下面的设置为true不会改变上面的结果（默认为true）
  auto-dialect: true
  page-size-zero: false # ②
  reasonable: true #
  # 默认值为 false，该参数对使用 RowBounds 作为分页参数时有效。（一般用不着）
  offset-as-page-num: false
  # 默认值为 false，RowBounds是否进行count查询（一般用不着）
  row-bounds-with-count: false
  #params:
  #support-methods-arguments: 和params配合使用，具体可以看下面的讲解
  # 默认值为 false。设置为 true 时，允许在运行时根据多数据源自动识别对应方言的分页
  auto-runtime-dialect: false # ⑤
  # 与auto-runtime-dialect配合使用
  close-conn: true
  # 用于控制默认不带 count 查询的方法中，是否执行 count 查询，这里设置为true后，total会为-1
  default-count: false

redis:
  server:
    addr: 127.0.0.1:6379
    db: 0

#dubbo的配置
dubbo:
  application:
    name: customer-App
  registry:
    address: zookeeper://localhost:2181
    #address: nacos://localhost:8848
  ##如果要使用自己创建的命名空间可以使用下面2种方式
  #dubbo.registry.address = nacos://10.20.153.10:8848?namespace=5cbb70a5-xxx-xxx-xxx-d43479ae0932
  #dubbo.registry.parameters.namespace=5cbb70a5-xxx-xxx-xxx-d43479ae0932
  protocol:
    name: dubbo
    port: 20884
  consumer:
    cluster: failover
  provider:
    cluster: failback
    timeout: 2000
    retries: 2
    loadbalance: consistenthash

aliyun:
  oss:
    endpoint: oss-cn-shenzhen.aliyuncs.com # oss对外服务的访问域名
    accessKeyId: test # 访问身份验证中用到用户标识
    accessKeySecret: test # 用户用于加密签名字符串和oss用来验证签名字符串的密钥
    bucketName: biao-aliyun-oss-pic-bucket # oss的存储空间
    policy:
      expire: 300 # 签名有效期(S)
    maxSize: 10 # 上传文件大小(M)
    callback: http://localhost/aliyun/oss/callback  #文件上传成功后的回调地址
    dir:
      prefix: images/ # 上传文件夹路径前缀