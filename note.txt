//day01
1.springboot druid
2.mapper location 问题解决，需要将mapper文件放common模块的resources下
//day02
3.jar包：
// 三种打包jar方法 https://www.leadroyal.cn/?p=555，一是自带的jar命令，二是使用shadow plugin，三是使用springboot plugin
// 这里使用 springboot plugin打包jar，通过 buildscript 和 org.springframework.boot插件，打包使用此插件生成的 bootJar 命令
4.保存订单测试数据格式，时间格式中要有个T：
POST  http://localhost:8081/vehicle/business/save
{
  "uuid": "4",
  "clientUuid": "4",
  "idList": "4",
  "generateDate": "2019-01-06T00:00:00",
  "modifyDate": "2019-01-06T00:00:00"
}
//day03
5.rocketmq 事务实现
//day04
6.business 与 stock MQ 通信
// day05 修改订单和明细结构
7.POST  http://localhost:8081/vehicle/business/saveUnpaid
  {
    "clientUuid": "CN003",
    "generateDate": "2019-02-17T23:59:59",
    "paidStatus": false,
    "orderRemark": "买了个好东西，哈哈",
    "detail": [
    {"itemUuid": "SP000010", "quantity": "3","discountPrice": 12.56,"remark": "八折，优惠5元"},
    {"itemUuid": "SP000012","quantity": "2","discountPrice": 50.5,"remark": "优惠5元"},
    {"itemUuid": "SP000015","quantity": "1","discountPrice": 88.8,"remark": "九折，优惠10元"}
    ]
  }

8.IDEA 控制台输出中文乱码, idea64.exe.vmoptions文件末尾加 -Dfile.encoding=UTF-8

//day 06 business-stock-customer 业务整合连接
9.jackson使用
  /**因Jackson默认LocalDateTime序列化为："time":{"nano":538064800,"year":2020,"monthValue":1,"dayOfMonth":18,"hour":15,"minute":11,"second":9,
           * "month":"JANUARY","dayOfWeek":"SATURDAY","dayOfYear":18,"chronology":{"id":"ISO","calendarType":"iso8601"}}
           * 导致无法反序列化为LocalDateTime，可以先将LocalDateTime转为instant，再转回来。*/
          @JsonSerialize(using = CustomDateSerializer.class)
          @JsonDeserialize(using = CustomDateDeserializer.class)
   需预定义下CustomDateSerializer和CustomDateDeserializer两个类即可，

10 注意defaultMQPushConsumer.setMessageModel(MessageModel.CLUSTERING);
   导致消息会被同group消费者"瓜分"式消费，

11.配置增加全局： context-path: /vehicle #所有访问该应用的路径前缀
   http://localhost:8081/vehicle/business/save
12.ShopOrderService.saveOrder()方法中，使用RPC调用clientService.addPoint(),这里就使用了事务的传播属性：
13.表设计中字符统一使用utf8mb4，表示是否的字段统一使用is_deleted,模式
day 07
14.dubbo服务和模块的服务分开，对外RPC只暴露dubbo服务，再通过dubbo服务内部调用模块的服务，这样的好处就是服务分离，可选择性暴露内部服务方法，
  模块的服务仅供模块内部使用！

// day07 使用soul网关
15.出现错误提示： has been blocked by CORS policy: The 'Access-Control-Allow-Origin' header contains multiple values '*‘
  是因为soul网关已经处理了跨域，而服务器端又作跨域处理，导致重复，故我这里服务端去掉了cors 处理

16.千万注意Mybatis的bug：Entity字段与表字段对应关系，如果自己实现了getter和setter，Entity最后的输出字段以getter和setter方法名称中的为准！！！
   使用@TableField注解对应都没用，在mapper文件中用BaseResultMap中设置也没用！！！
       @TableField(value = "brand_name")
       private String brandName;
   经其他模块测试： 发现应该是Mapper.xml文件没有被加载，在程序启动时，可以通过控制台看到是否加载了。
   Parsed mapper file: 'file [D:\vehicle-shop-admin .....
17.
前端部署在一个ip，在前端发送请求过程中，会需要位于不同的IP:PORT微服务来响应，前端请求最佳实践应该是都向一个IP，再由网关去路由，于是就使用到了网关。
注意：soul网关使用中发现无法支持DELETE转发，只能改为使用GET,虽然RESTFUL属于比较好的实践，可以在同一个@RequestMapping("/stock")通过不同的动词
   区分，但目前使用最广泛的是GET/POST，导致很多其他的语义DELETE/PUT使用退化为了GET/POST

18.vue前端删除后已删数据仍停留在页面的问题解决：https://blog.csdn.net/qq_39009348/article/details/81698316

day08 客户模块开发

19.nacos的相关测试主要集中在 customer模块中。
其中的一个测试：
http://localhost:8082/vehicle/client/nacos/service/providers:com.biao.shop.common.rpc.service.ShopClientRPCService:1.0.0:

day09
20.AspectAOP 在commmon模块配置。

21.Redis缓存在business模块

day10
22 .com.biao.shop.order.impl.OrderServiceImpl，这里使用 PageInfo 分页，发现有问题，sql只能是 LIMIT (size)，
导致无法分页，故改为 mbp 分页，即分页后，又接着需要对分页内容进行转换的，可以使用 mbp的分页解决！！

